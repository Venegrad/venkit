if framework_class_prefix is defined && framework_class_prefix
	// stylus bugfix
else 
	framework_class_prefix = ''


font-url(file)
	return '../fonts/' + file

webfont(family, file, weight = normal, style = normal)
	@font-face
		font-family family
		font-display swap
		src url(font-url(file + '.woff')) format('woff')				
		font-weight weight
		font-style style


wrap(width = wrapper, paddingd = wrap_padding)
	margin-left auto
	margin-right auto
	padding-left paddingd
	padding-right paddingd
	max-width width
	width 100%

bgp(pos1 = center, pos2 = center)
	background-repeat no-repeat
	background-size cover
	background-position pos1 pos2

placeholder(color)
	&::-webkit-input-placeholder
		color color
	&::-moz-placeholder
		color color
	&:-ms-input-placeholder
		color color
	&:-moz-placeholder
		color color

fl(ww = 'nowrap', jj = 'flex-start', aa = 'stretch')
	display flex
	// wrap
	if ww == 'n'
		flex-wrap nowrap
	else if ww == 'w'
		flex-wrap wrap
	else if ww != "nowrap"
		flex-wrap ww

	// justify content
	if jj == "fs"
		justify-content flex-start
	else if jj == "fe"
		justify-content flex-end
	else if jj == "sb"
		justify-content space-between
	else if jj == "sa"
		justify-content space-around
	else if jj == "c"
		justify-content center
	else if jj != 'flex-start'
		justify-content jj

	// align items
	if aa == "fs"
		align-items flex-start
	else if aa == "fe"
		align-items flex-end
	else if aa == "c"
		align-items center
	else if aa != "stretch"
		align-items aa

bg(urls, positionr = 'center center', psr = 'no-repeat')
	background-image url(css_image_path+urls) 
	if positionr == 'c'
		background-position center center
	else if positionr == 'center center'
		background-position center center	
	else if positionr == 'lt'
		background-position left top
	else if positionr == 'ct'
		background-position center top
	else if positionr == 'rt'
		background-position right top
	else if positionr == 'lc'
		background-position left center
	else if positionr == 'rc'
		background-position right center
	else if positionr == 'cc'
		background-position center center
	else if positionr == 'lb'
		background-position left bottom
	else if positionr == 'rb'
		background-position right bottom
	else if positionr == 'cb'
		background-position center bottom
	else if positionr == 'cover'
		background-size cover
	else if positionr == 'ccc'
		background-size cover
		background-position center center
	else if positionr == 'contain'
		background-size contain
	else if positionr != "center center" 
		background-position positionr
	if psr == "r"
		background-repeat repeat
	else if psr == 'x'
		background-repeat repeat-x
	else if psr == 'y'
		background-repeat repeat-y
	else if psr == 'no-repeat'
		background-repeat no-repeat

clearfix()
	&:after
		display table
		clear both
		content ''

invert_hash(hash)
	a2 = {}
	keys = keys(hash)
	len = length(keys) - 1
	for key, idx in keys
		key2 = keys[len - idx]
		a2[key2] = hash[key2]
	return a2

tr(t, tp = all)
	transition tp (t)s ease

text(fz = 14px, fw = 400, lh = normal, ls = normal)
	font-size fz 
	font-weight fw
	line-height lh
	letter-spacing ls

angle()
	border 3px solid transparent
	border-top 4px solid #999
	size 0px
	display block
	absolute right 0 top 50%
	margin-top -2px
	tr(0.3)
	content ''

phAnimation(color_def, color_s)
	background-image linear-gradient(to left, var(color_def) 0%, var(color_s) 50%, var(color_def) 100%)
	background-size 500% 100%

icon(hasgtag, fz = 1rem, aft = 'before')
	if aft == 'before'
		&:before
			@extends .i, .i-{hasgtag}::before
			font-size fz
	else
		&:after
			@extends .i, .i-{hasgtag}::before
			font-size fz


if grid_bpoint is defined && grid_bpoint
	if grid_always_inverted is defined && grid_always_inverted
		grid_inverted_class = ''
		grid_default_class = '-i'
	else
		grid_inverted_class = '-i'
		grid_default_class = ''       

	maw = {}
	for index, key in grid_bpoint
		push(maw, maw[index] = '(max-width: '+key+'px)')

	miw = {}
	for index, key in invert_hash(grid_bpoint)
		push(miw, miw[index] = '(min-width: '+(key + 1)+'px)')